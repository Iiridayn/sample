<html>
<!-- Lab spec created by Quinn Snell, March 2003 -->
<head>
<title>Threads, Processes, Shared Memory, and Synchronization</title>
<style>
<!--
 li.MsoNormal
	{mso-style-parent:"";
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	margin-left:0in; margin-right:0in; margin-top:0in}
-->
</style>
</head>

<body>

<p align="center"><font size="6">Threads, Processes, Shared Memory, and Synchronization<br>
</font>

<p><b>Objectives</b></p>
<ul>
  <li>Understand threads, shared memory, mutual exclusion, and synchronization</li>
  <li>See what happens when shared resources are not protected</li>
  <li>Learn how to use threads and synchronization primitives in Linux</li>
</ul>

<p><b>Requirements</b></p>
This lab is based on problem 5.21 in your text books. You will be writing
programs to solve the barbershop problem.  This problem is described on pages
229-234 in the Stallings book.  Figure 5.20 is an implementation of 
a fair barbershop. As problem 5.21 points out, it has some problems. Your
task is to correct the problems. Start out by implementing the fair barbershop
in Linux, then correct your implementation to solve the problems listed in 
problem 5.21.

<p>You should write:
<ul>
    <li>A setup program that creates all the semaphores and shared memory and
    does the initialization of these shared resources.
    <li>A customer program that connects to the shared resources and then
    launches a thread for each customer. The number of customers will be a 
    command-line argument to the customer program. Each customer thread will
    execute the same code.
    <li>A barber program that connects to the shared resources and then
    launches a thread for each barber. The number of barbers will be a 
    command-line argument to the barber program. Each barber thread will
    execute the same code.
    <li>A cashier program that connects to the shared resources and then
    launches a thread for each cashier. The number of cashiers will be a 
    command-line argument to the cashier program. Each cashier thread will
    execute the same code.
</ul>

<p>
In doing this lab, you may find the information useful. Please look at the man
pages if you need further information on the functions listed below.

<ul>
    <li><b>Thread Information</b>
        <ul>
            <li>Thread Functions:
                <ul>
                    <li>int  pthread_create ( pthread_t  *  thread, pthread_attr_t * attr, void * (*start_routine)(void *), void * arg )
                        <ul>
                            <li>pthread_create creates a new thread of control that  executes  concurrently
                                with  the  calling  thread. The new thread applies the function <b>start_routine
                                </b> passing it <b>arg</b> as the first argument. The new  thread terminates
                                either explicitly, by calling pthread_exit(3), or implicitly, by returning from 
                                the <b>start_routine</b> function.   The <b>attr</b> argument specifies thread 
                                attributes to be applied to the  new thread.  For our purposes this can be set 
                                to NULL.
                        </ul>
                    <li>void pthread_exit ( void *retval )
                        <ul>
                            <li>pthread_exit  terminates  the  execution  of the  calling thread.  The 
                                <b>retval</b> argument is the return value of the thread.
                        </ul>
                    <li>int pthread_join ( pthread_t th, void **thread_return )
                        <ul>
                            <li> pthread_join  suspends  the  execution  of the calling thread until the
                                 thread identified by <b>th</b> terminates, either by  calling  pthread_exit(3)
                                 or by being cancelled.  If  <b>thread_return</b> is not NULL, the return value
                                 of th is stored in the location pointed to by thread_return.
                        </ul>
                </ul>
            <li>Thread Include:
                <ul>
                    <li>#include &#60;semaphore.h&#62;
                </ul>
            <li>Thread Compile options:
                <ul>
                    <li><font color=red> Use the <b>-lpthread</b> flag option if your program uses either semaphores or 
                        threads.  Otherwise you will get errors.</font>
                   <li> If you get the following error:<p>
/usr/bin/ld: cannot find -lpthread <br>
collect2: ld returned 1 exit status <p>

                <ul>
                <li>Edit the <b>.bashrc</b> (or <b>.cshrc</b>) file in your home directory 
                <li>Add  <b>/usr/lib</b> to the <b>export PATH</b> (or <b>setenv PATH</b>) variable. 
                <li>Type  <b>source .bashrc</b> (or <b>.cshrc</b>).  </li>

                </ul>
                </ul>

            <br><br>
        </ul>
    <li><b>Semaphore information</b>
        <ul>
                There are two different libraries that can be used to create
                semaphores.  The first allows for the most simple implimentation of a
                semaphore.  The second allows for much more complex semaphores and
                semaphore operations.  Barbershop can easily be implemented
                with the first set of functions, but works best if only one
                process is running your implementation.  If you plan on using
                shared memory and multiple process you might want to take a
                look at the second set of semaphore functions.<br><br>
            <li>Simple Semaphore Functions: 
                <ul>
                    <li>int sem_init(sem_t *sem, int pshared, unsigned int value);
                        <ul>
                            <li> sem_init initializes the semaphore object pointed to by <b>sem</b>.  The count
                                 associated  with  the semaphore is set initially to <b>value</b>.  The <b>pshared</b>
                                 argument indicates whether the semaphore is local to the  current
                                 process ( <b>pshared</b> is zero) or is to be shared between several processes (
                                 <b>pshared</b> is not zero).  <font color=red>LinuxThreads currently does not support 
                                 process-shared semaphores, thus  sem_init always returns with error ENOSYS if
                                 <b>pshared</b> is not zero.</font>
                        </ul>
                    <li>int sem_wait(sem_t * sem);
                        <ul>
                            <li>sem_wait suspends the calling thread until the semaphore pointed to  by
                                <b>sem</b>  has  non-zero  count.  It  then atomically decreases the semaphore
                                count.
                        </ul>
                    <li>int sem_post(sem_t * sem);
                        <ul>
                            <li> sem_post  atomically increases the count of the semaphore pointed to by
                                 <b>sem</b>.  This function never blocks and can safely be used in asynchronous
                                 signal handlers.
                        </ul>
                    <li>int sem_destroy(sem_t * sem);
                        <ul>
                            <li> sem_destroy destroys a semaphore object, freeing the resources it might
                                 hold.  No  threads  should  be  waiting  on the  semaphore at the time
                                 sem_destroy is called. In the LinuxThreads implementation, no resources
                                 are  associated  with semaphore objects, thus sem_destroy actually does
                                 nothing except checking that no thread is waiting on the semaphore.
                        </ul>
                </ul>
            <li>Complex Semaphore Functions: 
                <ul>
                    <li>int semget ( key_t key, int nsems, int semflg )
                    <li>int semctl ( int semid, int semnum, int cmd, union semun arg )
                    <li>int semop ( int semid, struct sembuf *sops, unsigned nsops )
                    <li>Feel free to take a look at each of these functions in the man pages 
                        to get more information.  The program semaphores.c listed below shows 
                        an example of their implementation.
                </ul>
        </ul><br><br>
<font color = red><b>You are not required to use the Complex Semaphore 
Functions or Shared Memory. </b></font>
<p>
    <li><b>Shared memory information</b>
        <ul>
            <li>Shared Memory Funtions:
                <ul>
                    <li>int shmget ( key_t key, int size, int shmflg )
                    <li>void *shmat ( int shmid, const void *shmaddr, int shmflg )
                    <li>int shmdt ( const void *shmaddr )
                    <li>int shmctl ( int shmid, int cmd, struct shmid_ds *buf )
                    <li>You will only need to use this if you have multiple
                    processes that need to share the same memory.  An example
                    of these functions can be found in semaphores.c listed
                    below.  Please feel free to check the man pages as well.
                    <li><font color=red>These functions are designed to go along with the
                    complex semaphore functions.  If you are using the simple
                    semaphore functions there is no need to set up shared
                    memory.</font>
                </ul>
        </ul>
</ul>
<p><b>Downloads</b>
Here are some small sample programs that you may use for reference.
<ul>
    <li>Threads: In this example, a program creates two threads that launch
    and run a simple routine. The main process waits for the threads to 
    terminate.  When you compile this one, you will need to link the pthread library using -lpthread.
        <ul>
            <li><a href="synch/threads.c">threads.c</a> 
            
        </ul><br><br>
    <li>Semaphores and Shared Memory: In the following examples, semaphores are used to block writing to a shared
    data structure.  In <a href="synch/semaphores_and_threads.c">semaphores_and_threads.c</a> 
    simply run the program and watch what happens.  To fully understand what is going on take a look at
    the code.  This example demonstrates well how threads and semaphores can
    work together to produce a desired result.  If you want to run 
    <a href="synch/semaphores.c">semaphores.c</a>, run the program twice, once
    with an argument of 1 and another time with an argument of 2.  You might
    want to type the following at the command line:<br><br>
        <ul>
            <li>semaphores 1 &
            <li>semaphores 2 &
        </ul>
        <p>You will note that the first process will not finish until the
        second process begins.  semaphores.c is an example of two processes
        sharing a piece of shared memory.  This requires that you create a
        shared memory structure and use the complex semaphore functions.</p>
</ul>

You may also find it helpful to look at 
<a href="http://www.advancedlinuxprogramming.com">Advanced Linux Programming</a>

<p><b>Pass-off</b></p>
<ul>
  <li>Demonstrate your programs to the TA.&nbsp; </li>
  <li>Show your code and explain what is going on.&nbsp; </li>
  <li>Convince the TA that you have correctly solved problem 5.21
</ul>

<hr>
<p align="center"><font size="1">Contributors</font><font size="1">: Quinn Snell, Winter 2003<br>
Draft: March 17, 2003</font></p>

</body>
</html>
